""Nicki6 Vim Config 
" Inspirations are listed throughout via links including the following:
" Martin Brochhaus
"===================VUNDLE========================================
set nocompatible              " be iMproved, required
filetype off                  " required

" Automatic reloading of .vimrc
 autocmd! bufwritepost .vimrc source %

" home and end, page up and page down mappings 
 noremap H <home>
 vnoremap H <home>
 noremap L <end>
 vnoremap L <end>
 noremap K <pageup>
 vnoremap K <pageup>
 noremap J <pagedown>
 vnoremap J <pagedown>

" Change between files more quickly when editing multiple files
" use :files to see all open files
 nnoremap b :buffers<CR>
 nnoremap ` :buffers<CR>:buffer<SPACE>

" Jump Between Tags (forwards and back respectively)
 nnoremap <C-u> <C-]> 
 nnoremap <C-y> <C-t>

" tBetter copy & paste
" When you want to paste large blocks of code into vim, press F2 before you
" paste. At the bottom you should see ``-- INSERT (paste) --``.
" vnoremap <C-c> "*y need to compile with +clipboard for this
" set pastetoggle=<F2>
 set clipboard=unnamed

" Spell checking 
"change misspelled words from getting highlighted to underlined
hi clear SpellBad
hi SpellBad cterm=underline
"setlocal spell spelllang=en_us
" set spell might work too

" Rebind <Leader> key
" I like to have it here becuase it is easier to reach than the default and
" it is next to ``m`` and ``n`` which I use for navigating between tabs.
 let mapleader = ","

" Bind nohl
" Removes highlight of your last search
" ``<C>`` stands for ``CTRL`` and therefore ``<C-n>`` stands for ``CTRL+n``
 noremap <leader>n :nohl<CR>

" Quicksave command
 nnoremap <C-A> :update<CR>
 vnoremap <C-A> <C-C>:update<CR>
 inoremap <C-A> <C-O>:update<CR>

 nnoremap s :update<CR>
 nnoremap w ge

" Quick quit command
 noremap <Leader>e :quit<CR>  " Quit current window
 noremap <Leader>E :qa!<CR>   " Quit all windows

 nnoremap q :quit<CR>

" bind Ctrl+<movement> keys to move around the windows, instead of using Ctrl+w + <movement>
" Every unnecessary keystroke that can be saved is good for your health :)
 noremap <c-j> <c-w>j
 noremap <c-k> <c-w>k
 noremap <c-l> <c-w>l
 inoremap <c-l> <c-w>l
 noremap <c-h> <c-w>h

" map sort function to a key
 vnoremap <Leader>s :sort<CR>

" easier moving of code blocks
" Try to go into visual mode (v), then select several lines of code here and
" then press ``>`` several times.
 vnoremap < <gv  " better indentation
 vnoremap > >gv  " better indentation

" Showing line numbers and length
"" set number  " show line numbers
 set textwidth=120   " width of document (used by gd)
 set nowrap  " don't automatically wrap on load
 set fo-=t   " don't automatically wrap text when typing
 set colorcolumn=120
 highlight ColorColumn ctermbg=DarkGrey
 hi CSVColumnEven term=bold ctermbg=4 guibg=DarkBlue                             
 hi CSVColumnOdd  term=bold ctermbg=darkgrey guibg=DarkGrey

" Make search case insensitive
 set hlsearch
 set incsearch
 set ignorecase
 set smartcase

" Disable stupid backup and swap files - they trigger too many events
" for file system watchers
 set nobackup
 set nowritebackup
 set noswapfile

"Load plugins from pathogen and vimballs in the .vim/ directory
""execute pathogen#infect()
filetype plugin on "might change to just 'filetype on'

"Route the semi-colon as a colon to type commands faster
nnoremap ; :

" Real programmers don't use TABs but spaces
set ls=2 
set ts=4
set tabstop=4 " size of a hard tabstop
set expandtab " always uses spaces instead of tab characters
set softtabstop=4 " Sets the number of columns for a TAB
set shiftwidth=4 " for block comments
set nocompatible
set backspace=2
set ignorecase


"Status line - show the percentage through a file 
set statusline =%f\ %P 
""set statusline +=%4*\ %<%F%*            "full path


"Turn on syntax highlighting
syntax on
highlight Comment ctermfg='darkgrey'
highlight Number ctermfg='blue'
highlight String ctermfg='yellow'
highlight Float ctermfg='blue'

"Cursor Changes depending on mode
" Enable CursorLine
set cursorline
set cursorcolumn

" Default Colors for CursorLine
highlight  CursorLine ctermbg=None ctermfg=None
highlight  CursorColumn ctermbg=DarkGrey ctermfg=None

" Revert Color to default when leaving Insert Mode
autocmd InsertLeave * highlight CursorLine ctermbg=None ctermfg=None
autocmd InsertLeave * highlight Cursor guifg=red

"Folding
"zM fold all
"zR unfold all
set foldmethod=indent
set nofoldenable
nnoremap f zm
nnoremap F zr

"autocmd FileType c setlocal foldmethod=syntax
"autocmd FileType c nnoremap f zM
"autocmd FileType c nnoremap F zR

"Tags 
" ctags -R src/  -- sets up a tags file which allows definition jumping
" with Ctrl-] and Ctrl-T to jump back. ( or g] )
"semicolon means it starts in the cur dir and searches up directories until it
"hits a tags file
set tags=tags;

set completeopt+=longest

" Commenting
"autocmd FileType java,groovy,scala nnoremap c i//<ESC>
"
" Commenting blocks of code.
autocmd FileType c,cpp,java,scala let b:comment_leader = '// '
autocmd FileType sh,ruby,python   let b:comment_leader = '# '
autocmd FileType conf,fstab       let b:comment_leader = '# '
autocmd FileType tex              let b:comment_leader = '% '
autocmd FileType mail             let b:comment_leader = '> '
autocmd FileType vim              let b:comment_leader = '" '
"noremap <silent> ,cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
"noremap <silent> ,cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>
noremap <silent> ,c :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
noremap <silent> ,C :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>
